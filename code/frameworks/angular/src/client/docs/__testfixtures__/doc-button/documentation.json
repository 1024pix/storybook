{
  "pipes": [],
  "interfaces": [
    {
      "name": "ISomeInterface",
      "id": "interface-ISomeInterface-c41715855a5502298a7371896051b0eb7ece5dd69a5ed627e33d70af5f3fb5c01ee7696471d891de9c989d746e24d5b58180ae67f596b0e4db7c25b189b17e98",
      "file": "src/client/docs/__testfixtures__/doc-button/input.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  Output,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\n\nexport const exportedConstant = 'An exported constant';\n\nexport type ButtonSize = 'small' | 'medium' | 'large' | 'xlarge';\n\nexport enum ButtonAccent {\n  'Normal' = 'Normal',\n  'High' = 'High',\n}\n\nexport interface ISomeInterface {\n  one: string;\n  two: boolean;\n  three: any[];\n}\n\n/**\n * This is a simple button that demonstrates various JSDoc handling in Storybook Docs for Angular.\n *\n * It supports [markdown](https://en.wikipedia.org/wiki/Markdown), so you can embed formatted text,\n * like **bold**, _italic_, and `inline code`.\n *\n * > How you like dem apples?! It's never been easier to document all your components.\n *\n * @string Hello world\n * @link [Example](http://example.com)\n * @code `ThingThing`\n * @html <span class=\"badge\">aaa</span>\n */\n@Component({\n  selector: 'doc-button',\n  template: '<button>{{ label }}</button>',\n})\nexport class InputComponent<T> {\n  @ViewChild('buttonRef', { static: false }) buttonRef: ElementRef;\n\n  /** Appearance style of the button. */\n  @Input()\n  public appearance: 'primary' | 'secondary' = 'secondary';\n\n  /** Specify the accent-type of the button */\n  @Input()\n  public accent: ButtonAccent;\n\n  /** Sets the button to a disabled state. */\n  @Input()\n  public isDisabled = false;\n\n  /**\n   * The inner text of the button.\n   *\n   * @required\n   */\n  @Input()\n  public label: string;\n\n  /** Size of the button. */\n  @Input()\n  public size?: ButtonSize = 'medium';\n\n  /** Specifies some arbitrary object */\n  @Input() public someDataObject: ISomeInterface;\n\n  /**\n   * Some input you shouldn't use.\n   *\n   * @deprecated\n   */\n  @Input()\n  public somethingYouShouldNotUse = false;\n\n  /**\n   * Handler to be called when the button is clicked by a user.\n   *\n   * Will also block the emission of the event if `isDisabled` is true.\n   */\n  @Output()\n  public onClick = new EventEmitter<Event>();\n\n  /**\n   * This is an internal method that we don't want to document and have added the `ignore` annotation to.\n   *\n   * @ignore\n   */\n  public handleClick(event: Event) {\n    event.stopPropagation();\n\n    if (!this.isDisabled) {\n      this.onClick.emit(event);\n    }\n  }\n\n  private _inputValue = 'some value';\n\n  /** Setter for `inputValue` that is also an `@Input`. */\n  @Input()\n  public set inputValue(value: string) {\n    this._inputValue = value;\n  }\n\n  /** Getter for `inputValue`. */\n  public get inputValue() {\n    return this._inputValue;\n  }\n\n  @HostListener('click', ['$event.target'])\n  onClickListener(btn) {\n    console.log('button', btn);\n  }\n\n  @HostBinding('class.focused') focus = false;\n\n  /**\n   * Returns all the CSS classes for the button.\n   *\n   * @ignore\n   */\n  public get classes(): string[] {\n    return [this.appearance, this.size]\n      .filter((_class) => !!_class)\n      .map((_class) => `btn-${_class}`);\n  }\n\n  /**\n   * @ignore\n   */\n  public ignoredProperty = 'Ignore me';\n\n  /** Public value. */\n  public internalProperty = 'Public hello';\n\n  /** Private value. */\n  private _value = 'Private hello';\n\n  /** Set the private value. */\n  public set value(value: string | number) {\n    this._value = `${value}`;\n  }\n\n  /** Get the private value. */\n  public get value(): string | number {\n    return this._value;\n  }\n\n  /**\n   * An internal calculation method which adds `x` and `y` together.\n   *\n   * @param x Some number you'd like to use.\n   * @param y Some other number or string you'd like to use, will have `parseInt()` applied before calculation.\n   */\n  public calc(x: number, y: string | number): number {\n    return x + parseInt(`${y}`, 10);\n  }\n\n  /** A public method using an interface. */\n  public publicMethod(things: ISomeInterface) {\n    console.log(things);\n  }\n\n  /**\n   * A protected method.\n   *\n   * @param id Some `id`.\n   */\n  protected protectedMethod(id?: number) {\n    console.log(id);\n  }\n\n  /**\n   * A private method.\n   *\n   * @param password Some `password`.\n   */\n  private privateMethod(password: string) {\n    console.log(password);\n  }\n\n  @Input('showKeyAlias')\n  public showKey: keyof T;\n\n  @Input()\n  public set item(item: T[]) {\n    this.processedItem = item;\n  }\n\n  public processedItem: T[];\n}\n",
      "properties": [
        {
          "name": "one",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "three",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "two",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 27
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    }
  ],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "InputComponent",
      "id": "component-InputComponent-c41715855a5502298a7371896051b0eb7ece5dd69a5ed627e33d70af5f3fb5c01ee7696471d891de9c989d746e24d5b58180ae67f596b0e4db7c25b189b17e98",
      "file": "src/client/docs/__testfixtures__/doc-button/input.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "doc-button",
      "styleUrls": [],
      "styles": [],
      "template": "<button>{{ label }}</button>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "accent",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nSpecify the accent-type of the button",
          "description": "<p>Specify the accent-type of the button</p>\n",
          "line": 57,
          "type": "ButtonAccent",
          "decorators": []
        },
        {
          "name": "appearance",
          "defaultValue": "'secondary'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nAppearance style of the button.",
          "description": "<p>Appearance style of the button.</p>\n",
          "line": 53,
          "type": "\"primary\" | \"secondary\"",
          "decorators": []
        },
        {
          "name": "inputValue",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nSetter for `inputValue` that is also an `@Input`.",
          "description": "<p>Setter for <code>inputValue</code> that is also an <code>@Input</code>.</p>\n",
          "line": 111,
          "type": "string",
          "decorators": []
        },
        {
          "name": "isDisabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nSets the button to a disabled state.",
          "description": "<p>Sets the button to a disabled state.</p>\n",
          "line": 61,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "item",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 196,
          "type": "T[]",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1574,
              "end": 1587,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 325,
              "tagName": {
                "pos": 1575,
                "end": 1583,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "required"
              },
              "comment": ""
            }
          ],
          "rawdescription": "\n\nThe inner text of the button.\n\n",
          "description": "<p>The inner text of the button.</p>\n",
          "line": 69,
          "type": "string",
          "decorators": []
        },
        {
          "name": "showKeyAlias",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 193,
          "type": "",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nSize of the button.",
          "description": "<p>Size of the button.</p>\n",
          "line": 73,
          "type": "ButtonSize",
          "decorators": []
        },
        {
          "name": "someDataObject",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nSpecifies some arbitrary object",
          "description": "<p>Specifies some arbitrary object</p>\n",
          "line": 76,
          "type": "ISomeInterface",
          "decorators": []
        },
        {
          "name": "somethingYouShouldNotUse",
          "defaultValue": "false",
          "deprecated": true,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1849,
              "end": 1864,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 329,
              "tagName": {
                "pos": 1850,
                "end": 1860,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "deprecated"
              },
              "comment": ""
            }
          ],
          "rawdescription": "\n\nSome input you shouldn't use.\n\n",
          "description": "<p>Some input you shouldn&#39;t use.</p>\n",
          "line": 84,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandler to be called when the button is clicked by a user.\n\nWill also block the emission of the event if `isDisabled` is true.\n",
          "description": "<p>Handler to be called when the button is clicked by a user.</p>\n<p>Will also block the emission of the event if <code>isDisabled</code> is true.</p>\n",
          "line": 92,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_inputValue",
          "defaultValue": "'some value'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 107,
          "modifierKind": [121]
        },
        {
          "name": "_value",
          "defaultValue": "'Private hello'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Private value.</p>\n",
          "line": 147,
          "rawdescription": "\nPrivate value.",
          "modifierKind": [121]
        },
        {
          "name": "buttonRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'buttonRef', {static: false}"
            }
          ]
        },
        {
          "name": "focus",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 125,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.focused'"
            }
          ]
        },
        {
          "name": "internalProperty",
          "defaultValue": "'Public hello'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Public value.</p>\n",
          "line": 144,
          "rawdescription": "\nPublic value.",
          "modifierKind": [123]
        },
        {
          "name": "processedItem",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T[]",
          "optional": false,
          "description": "",
          "line": 200,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "calc",
          "args": [
            {
              "name": "x",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "y",
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAn internal calculation method which adds `x` and `y` together.\n\n",
          "description": "<p>An internal calculation method which adds <code>x</code> and <code>y</code> together.</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 3579,
                "end": 3580,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "x"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3573,
                "end": 3578,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Some number you&#39;d like to use.</p>\n"
            },
            {
              "name": {
                "pos": 3624,
                "end": 3625,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "y"
              },
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3618,
                "end": 3623,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Some other number or string you&#39;d like to use, will have <code>parseInt()</code> applied before calculation.</p>\n"
            }
          ]
        },
        {
          "name": "onClickListener",
          "args": [
            {
              "name": "btn",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'click', ['$event.target']"
            }
          ],
          "jsdoctags": [
            {
              "name": "btn",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "privateMethod",
          "args": [
            {
              "name": "password",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 188,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nA private method.\n\n",
          "description": "<p>A private method.</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 4133,
                "end": 4141,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "password"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4127,
                "end": 4132,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Some <code>password</code>.</p>\n"
            }
          ]
        },
        {
          "name": "protectedMethod",
          "args": [
            {
              "name": "id",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 179,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nA protected method.\n\n",
          "description": "<p>A protected method.</p>\n",
          "modifierKind": [122],
          "jsdoctags": [
            {
              "name": {
                "pos": 3998,
                "end": 4000,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "id"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 3992,
                "end": 3997,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Some <code>id</code>.</p>\n"
            }
          ]
        },
        {
          "name": "publicMethod",
          "args": [
            {
              "name": "things",
              "type": "ISomeInterface",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 170,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\nA public method using an interface.",
          "description": "<p>A public method using an interface.</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "things",
              "type": "ISomeInterface",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.focused",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 125,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [
        {
          "name": "click",
          "args": [
            {
              "name": "btn",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event.target"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 121
        }
      ],
      "description": "<p>This is a simple button that demonstrates various JSDoc handling in Storybook Docs for Angular.</p>\n<p>It supports <a href=\"https://en.wikipedia.org/wiki/Markdown\">markdown</a>, so you can embed formatted text,\nlike <strong>bold</strong>, <em>italic</em>, and <code>inline code</code>.</p>\n<blockquote>\n<p>How you like dem apples?! It&#39;s never been easier to document all your components.</p>\n</blockquote>\n",
      "rawdescription": "\n\nThis is a simple button that demonstrates various JSDoc handling in Storybook Docs for Angular.\n\nIt supports [markdown](https://en.wikipedia.org/wiki/Markdown), so you can embed formatted text,\nlike **bold**, _italic_, and `inline code`.\n\n> How you like dem apples?! It's never been easier to document all your components.\n\n",
      "type": "component",
      "sourceCode": "import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  Output,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\n\nexport const exportedConstant = 'An exported constant';\n\nexport type ButtonSize = 'small' | 'medium' | 'large' | 'xlarge';\n\nexport enum ButtonAccent {\n  'Normal' = 'Normal',\n  'High' = 'High',\n}\n\nexport interface ISomeInterface {\n  one: string;\n  two: boolean;\n  three: any[];\n}\n\n/**\n * This is a simple button that demonstrates various JSDoc handling in Storybook Docs for Angular.\n *\n * It supports [markdown](https://en.wikipedia.org/wiki/Markdown), so you can embed formatted text,\n * like **bold**, _italic_, and `inline code`.\n *\n * > How you like dem apples?! It's never been easier to document all your components.\n *\n * @string Hello world\n * @link [Example](http://example.com)\n * @code `ThingThing`\n * @html <span class=\"badge\">aaa</span>\n */\n@Component({\n  selector: 'doc-button',\n  template: '<button>{{ label }}</button>',\n})\nexport class InputComponent<T> {\n  @ViewChild('buttonRef', { static: false }) buttonRef: ElementRef;\n\n  /** Appearance style of the button. */\n  @Input()\n  public appearance: 'primary' | 'secondary' = 'secondary';\n\n  /** Specify the accent-type of the button */\n  @Input()\n  public accent: ButtonAccent;\n\n  /** Sets the button to a disabled state. */\n  @Input()\n  public isDisabled = false;\n\n  /**\n   * The inner text of the button.\n   *\n   * @required\n   */\n  @Input()\n  public label: string;\n\n  /** Size of the button. */\n  @Input()\n  public size?: ButtonSize = 'medium';\n\n  /** Specifies some arbitrary object */\n  @Input() public someDataObject: ISomeInterface;\n\n  /**\n   * Some input you shouldn't use.\n   *\n   * @deprecated\n   */\n  @Input()\n  public somethingYouShouldNotUse = false;\n\n  /**\n   * Handler to be called when the button is clicked by a user.\n   *\n   * Will also block the emission of the event if `isDisabled` is true.\n   */\n  @Output()\n  public onClick = new EventEmitter<Event>();\n\n  /**\n   * This is an internal method that we don't want to document and have added the `ignore` annotation to.\n   *\n   * @ignore\n   */\n  public handleClick(event: Event) {\n    event.stopPropagation();\n\n    if (!this.isDisabled) {\n      this.onClick.emit(event);\n    }\n  }\n\n  private _inputValue = 'some value';\n\n  /** Setter for `inputValue` that is also an `@Input`. */\n  @Input()\n  public set inputValue(value: string) {\n    this._inputValue = value;\n  }\n\n  /** Getter for `inputValue`. */\n  public get inputValue() {\n    return this._inputValue;\n  }\n\n  @HostListener('click', ['$event.target'])\n  onClickListener(btn) {\n    console.log('button', btn);\n  }\n\n  @HostBinding('class.focused') focus = false;\n\n  /**\n   * Returns all the CSS classes for the button.\n   *\n   * @ignore\n   */\n  public get classes(): string[] {\n    return [this.appearance, this.size]\n      .filter((_class) => !!_class)\n      .map((_class) => `btn-${_class}`);\n  }\n\n  /**\n   * @ignore\n   */\n  public ignoredProperty = 'Ignore me';\n\n  /** Public value. */\n  public internalProperty = 'Public hello';\n\n  /** Private value. */\n  private _value = 'Private hello';\n\n  /** Set the private value. */\n  public set value(value: string | number) {\n    this._value = `${value}`;\n  }\n\n  /** Get the private value. */\n  public get value(): string | number {\n    return this._value;\n  }\n\n  /**\n   * An internal calculation method which adds `x` and `y` together.\n   *\n   * @param x Some number you'd like to use.\n   * @param y Some other number or string you'd like to use, will have `parseInt()` applied before calculation.\n   */\n  public calc(x: number, y: string | number): number {\n    return x + parseInt(`${y}`, 10);\n  }\n\n  /** A public method using an interface. */\n  public publicMethod(things: ISomeInterface) {\n    console.log(things);\n  }\n\n  /**\n   * A protected method.\n   *\n   * @param id Some `id`.\n   */\n  protected protectedMethod(id?: number) {\n    console.log(id);\n  }\n\n  /**\n   * A private method.\n   *\n   * @param password Some `password`.\n   */\n  private privateMethod(password: string) {\n    console.log(password);\n  }\n\n  @Input('showKeyAlias')\n  public showKey: keyof T;\n\n  @Input()\n  public set item(item: T[]) {\n    this.processedItem = item;\n  }\n\n  public processedItem: T[];\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "accessors": {
        "inputValue": {
          "name": "inputValue",
          "setSignature": {
            "name": "inputValue",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 111,
            "rawdescription": "\nSetter for `inputValue` that is also an `@Input`.",
            "description": "<p>Setter for <code>inputValue</code> that is also an <code>@Input</code>.</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "inputValue",
            "type": "",
            "returnType": "",
            "line": 116,
            "rawdescription": "\nGetter for `inputValue`.",
            "description": "<p>Getter for <code>inputValue</code>.</p>\n"
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 150,
            "rawdescription": "\nSet the private value.",
            "description": "<p>Set the private value.</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | number",
            "line": 155,
            "rawdescription": "\nGet the private value.",
            "description": "<p>Get the private value.</p>\n"
          }
        },
        "item": {
          "name": "item",
          "setSignature": {
            "name": "item",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "item",
                "type": "T[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 196,
            "jsdoctags": [
              {
                "name": "item",
                "type": "T[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "exportedConstant",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/client/docs/__testfixtures__/doc-button/input.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'An exported constant'"
      }
    ],
    "functions": [],
    "typealiases": [
      {
        "name": "ButtonSize",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"small\" | \"medium\" | \"large\" | \"xlarge\"",
        "file": "src/client/docs/__testfixtures__/doc-button/input.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      }
    ],
    "enumerations": [
      {
        "name": "ButtonAccent",
        "childs": [
          {
            "name": "Normal",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Normal"
          },
          {
            "name": "High",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "High"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/client/docs/__testfixtures__/doc-button/input.ts"
      }
    ],
    "groupedVariables": {
      "src/client/docs/__testfixtures__/doc-button/input.ts": [
        {
          "name": "exportedConstant",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/client/docs/__testfixtures__/doc-button/input.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'An exported constant'"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {
      "src/client/docs/__testfixtures__/doc-button/input.ts": [
        {
          "name": "ButtonAccent",
          "childs": [
            {
              "name": "Normal",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Normal"
            },
            {
              "name": "High",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "High"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/client/docs/__testfixtures__/doc-button/input.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "src/client/docs/__testfixtures__/doc-button/input.ts": [
        {
          "name": "ButtonSize",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"small\" | \"medium\" | \"large\" | \"xlarge\"",
          "file": "src/client/docs/__testfixtures__/doc-button/input.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 21,
    "status": "low",
    "files": [
      {
        "filePath": "src/client/docs/__testfixtures__/doc-button/input.ts",
        "type": "component",
        "linktype": "component",
        "name": "InputComponent",
        "coveragePercent": 64,
        "coverageCount": "16/25",
        "status": "good"
      },
      {
        "filePath": "src/client/docs/__testfixtures__/doc-button/input.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ISomeInterface",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/client/docs/__testfixtures__/doc-button/input.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "exportedConstant",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
